/*
 * basedb.h
 *
 *  Created on: Aug 16, 2013
 *      Author: vlopatin
 */

#ifndef BASEDB_H_
#define BASEDB_H_

#include <stdlib.h>
#include <lvtypes.h>

struct sqlite3;
struct sqlite3_stmt;

enum {
	DB_COL_TYPE_INTEGER = 1,
	DB_COL_TYPE_FLOAT = 2,
	DB_COL_TYPE_TEXT = 3,
	DB_COL_TYPE_BLOB = 4,
	DB_COL_TYPE_NULL = 5,
};

enum {
	DB_OK = 0,
	DB_ERROR = 1,
	DB_FULL = 13,
	DB_READONLY = 8,
	DB_CORRUPT = 11,
	DB_CANTOPEN = 14,
	DB_NOTADB = 26,
	DB_DONE = 101,
	DB_ROW = 100,
};

class SQLiteDB {
protected:
	sqlite3 * _db;
	const char * _filename;
public:
	SQLiteDB() : _db(NULL), _filename(NULL) {}
	virtual ~SQLiteDB();
	sqlite3 * getHandle() { return _db; }
	const char * getFileName() { return _filename; }
	/// open database file; returns 0 on success, error code otherwise
	int open(const char * pathname, bool readOnly);
	/// closes DB
	int close();
	/// returns true if DB is opened
	bool isOpened();
	/// returns autoincrement key value generated by last insert
	lInt64 lastInsertId();

	// schema methods
	/// returns true if table exists
	bool tableExists(const char * tableName);
	/// returns true if column exists in table
	bool columnExists(const char * tableName, const char * columnName);
	/// runs update, returns number of affected rows; -1 if error
	int executeUpdate(const char * sql);

	/// checks if column present, adds if no such column; returns true if success, false if any error
	bool addColumnIfNotExists(const char * table, const char * columnName, const char * alterTableSql);

	/// gets database schema version
	int getVersion();
	/// sets database schema version
	void setVersion(int version);
};

class SQLiteStatement {
protected:
	SQLiteDB * _db;
	sqlite3_stmt * _stmt;
	const char * _sql;
	bool _firstStepExecuted;
	int _columnCount;
	int _rowsAffected;
	int _parameterCount;
	bool checkColumnIndexError(int index);
	bool checkParameterIndexError(int index);
public:
	SQLiteStatement(SQLiteDB * db) : _db(db), _stmt(NULL), _sql(NULL), _firstStepExecuted(false), _columnCount(0), _rowsAffected(0), _parameterCount(0) { }
	const char * getQuery() { return _sql; }
	virtual ~SQLiteStatement();
	/// prepares query; returns 0 if no error
	int prepare(const char * sql);
	/// executes query and returns one row of result or returns next row of result
	int step();
	/// prepare statement for reexecution
	int reset(bool clearBindings);
	/// returns true if query is prepared
	bool isOpened();
	/// closes prepared query and frees all resources
	int close();

	/// parameter binding (1-based index!!!)
	/// returns number of parameters specified in query, avaliable for binding
	int getParameterCount() { return _parameterCount; }
	/// set NULL to parameter
	int bindNull(int index);
	/// set int to parameter
	int bindInt(int index, int value);
	/// set 64-bit int to parameter
	int bindInt64(int index, lInt64 value);
	/// set utf-8 text string to parameter
	int bindText(int index, const char * str, int len);
	/// set blob value to parameter
	int bindBlob(int index, const void * data, int len);

	/// column reading (0-based index!!!)
	/// returns column count
	int getColumnCount() { return _columnCount; }
	/// return number of bytes in contents of column with specified index
	int getColumnBytes(int index);
	/// return column type
	int getColumnType(int index);
	/// return column blob data pointer
	const unsigned char * getBlob(int index);
	/// return column as double
	double getDouble(int index);
	/// return column value as int
	int getInt(int index);
	/// return column value as 64 bit int
	lInt64 getInt64(int index);
	/// return column value text pointer
	const char * getText(int index);


	/// returns autoincrement key value generated by last insert
	lInt64 lastInsertId() { return _db != NULL ? _db->lastInsertId() : 0; }
	/// returns rows updated/inserted/deleted by last execution of statement
	int rowsAffected() { return _rowsAffected; }


};


#endif /* BASEDB_H_ */
